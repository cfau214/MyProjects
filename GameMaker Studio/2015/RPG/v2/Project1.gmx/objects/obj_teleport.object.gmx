<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_button</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( y &gt; 100 &amp;&amp; y &lt; 400 )
{
    sprite_index = spr_buttonCave;
}
else if ( y &gt; 400 &amp;&amp; y &lt; 700 )
{
    sprite_index = spr_buttonMaze;
}
else if ( y &gt; 700 &amp;&amp; y &lt; 1000)
{
    sprite_index = spr_buttonForest;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
///////////
// CAVE
///////////
if ( mouse_y &gt; 0 &amp;&amp; mouse_y &lt; 400 )   
{
    // Player's spawn point when creating a new game.
    global.unpause_room = rm_cave1;
    
    
    // Change Music
        if (music_allow == true &amp;&amp; music_current != music_cave) {     // Check if it's alright to play music.
        
            if ( audio_is_playing(music_current) )          // If music is currently playing, stop it. 
                audio_stop_sound(music_current);
                        
           
            audio_play_sound(music_cave, 10, true);         // Start new music track.
            audio_sound_gain(music_cave, music_volume, 0);  // Sound Volume
            music_current = music_cave;
        }
}
///////////
// MAZE
///////////
else if ( mouse_y &gt;= 400 &amp;&amp; mouse_y &lt; 700 )
{
    // Player's spawn point when creating a new game.
    global.unpause_room = rm_Maze1L;
    
    
    // Change Music
        if (music_allow == true &amp;&amp; music_current != music_jungle) {     // Check if it's alright to play music.
        
            if ( audio_is_playing(music_current) )          // If music is currently playing, stop it. 
                audio_stop_sound(music_current);
                        
           
            audio_play_sound(music_jungle, 10, true);         // Start new music track.
            audio_sound_gain(music_jungle, music_volume, 0);  // Sound Volume
            music_current = music_jungle;
        }
}
///////////
// FOREST
///////////
if ( mouse_y &gt;= 700 &amp;&amp; mouse_y &lt; 1000 )
{
    // Player's spawn point when creating a new game.
    global.unpause_room = rm_Forest1;
    
    
    // Change Music
    if (music_allow == true &amp;&amp; music_current != music_forest) {     // Check if it's alright to play music.
    
        if ( audio_is_playing(music_current) )          // If music is currently playing, stop it. 
            audio_stop_sound(music_current);
                    
       
        audio_play_sound(music_forest, 10, true);         // Start new music track.
        audio_sound_gain(music_forest, music_volume, 0);  // Sound Volume
        music_current = music_forest;
    }
}


///////////////
// Resume
///////////////
obj_controller.pause = false;
room_goto(global.unpause_room);      // goes to previous room when resuming, aka the current room
obj_controller.alarm[0] = 1;         // teleport player to areas starting location
Player1.visible = true;              // because Player1 is persistent, this makes the sprite visible again when the player resumes the game
obj_gui.visible = true;              // because the health bar is persistent, this makes the healthbar visible again when the player resumes the game
obj_weapon.visible = true;           // because the weapon object is persistent, this makes the sprite visible again when the player resumes the game
audio_sound_gain(music_current, music_volume, 100);     // Restore music volume when leaving menu.
window_set_cursor(cr_none);          // Disable mouse cursor.
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
