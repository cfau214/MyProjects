<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_SpikeBallDown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>par_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
trip = 0
angry = 0
see = 0
// Basic stats
hostile = true;
hp = 180;
hp_max = 180;

// Offense
atk = 10;
damage = atk;

// Defense
immune = false;
armor = 6;

// Movement
default_speed = 2;

// Money Value
money = irandom(14);

// Experience Value
experience = 12;

//set animation speed
image_speed = (.15 + (round(random(10)) * .01));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>542</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sprite_transform</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>.6</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>.6</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>                Player1.money += money;
                Player1.experience += experience;
         
                
/*  Randomize drop rate. Each object is calculated separately so 
    that each object has its own chance to spawn.     */
    

/////////////////////
// Bubbles
/////////////////////

// Health bubble.
num = irandom(99);

if (num &lt; 15) {   // 15%

    // Randomize spawn location centered around the destroyed object.
    rand_x = random_range(x - 64, x + 64);
    rand_y = random_range(y - 64, y + 64);
    
    // Spawn new instance of object.
    instance_create(rand_x, rand_y, obj_healthbubble);
}    

// Stamina bubble.
num = irandom(99);
    
if (num &lt; 15) {      // 15%
  
    // Randomize spawn location centered around the destroyed object.
    rand_x = random_range(x - 64, x + 64);
    rand_y = random_range(y - 64, y + 64);
    
    // Spawn new instance of object.
    instance_create(rand_x, rand_y, obj_staminabubble);
}  

// Experience bubble.
num = irandom(99);

if (num &lt; 5) {      // 5%
  
    // Randomize spawn location centered around the destroyed object.
    rand_x = random_range(x - 64, x + 64);
    rand_y = random_range(y - 64, y + 64);
    
    // Spawn new instance of object.
    instance_create(rand_x, rand_y, obj_experiencebubble);
}

/////////////////////
// Collectibles
/////////////////////

// Spike Drop
num = irandom(99);

if (num &lt; 15) {      // 15%

    // Randomize spawn location centered around the destroyed object.
    rand_x = random_range(x - 64, x + 64);
    rand_y = random_range(y - 64, y + 64);
    
    // Spawn new instance of object.
    instance_create(rand_x, rand_y, obj_CSpike);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;
if see &gt; 0
see = see - 1;
if angry = 1
 mp_potential_step_object(Player1.x, Player1.y, default_speed, obj_groundavoid);  

////////////////////////////////
// Spike Trap Collision
////////////////////////////////
if place_meeting(x, y, obj_SpikeBasic)
{  
    if (!immune) {
    
        if (instance_nearest(x, y, obj_SpikeBasic).sprite_index == spr_SpikeUp ||
            instance_nearest(x, y, obj_SpikeBasic).sprite_index == spr_SpikeDown) {
            
            // Health
            hp -= hp_max * (1/3);
            
            // death
            if (hp &lt;= 0) {
                instance_destroy();
            } 
            
            // Knockback      
            // Negative speed to indicate moving away from player.
            move_towards_point(obj_SpikeBasic.x, obj_SpikeBasic.y, -25);
                  
            alarm[0] = 5;   // alarm[0] stops the object after knockback
            
            // Flash red when hit
            image_blend = c_red;
            alarm[1] = 8;
            
            // Immunity set to true to prevent the instance from taking damage every fame. Alarm[2] resets immunity after 20 frames.
            immune = true;
            alarm[2] = 20;
        }
    }
}

////////////////////////////////
// Arrow Collision
////////////////////////////////
if place_meeting(x, y, obj_Arrow)
{  
    if (!immune) {
            
            // Health
            hp -= hp_max * (1/3);
            
            // death
            if (hp &lt;= 0) {
                instance_destroy();
            } 
            
            // Knockback      
            // Negative speed to indicate moving away from player.
            move_towards_point(obj_SpikeBasic.x, obj_SpikeBasic.y, -25);
                  
            alarm[0] = 5;   // alarm[0] stops the object after knockback
            
            // Flash red when hit
            image_blend = c_red;
            alarm[1] = 8;
            
            // Immunity set to true to prevent the instance from taking damage every fame. Alarm[2] resets immunity after 20 frames.
            immune = true;
            alarm[2] = 20;
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>402</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_collision</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
////////////////////////////////
// Enemies parent object
////////////////////////////////
if place_meeting(x, y, par_weapons)
{  
    if (!immune &amp;&amp; par_weapons.active == true) {
        // Health
        if (Player1.charging)
            hp -= (Player1.damage * Player1.atk_charged) - armor;
        else
            hp -= Player1.damage - armor;
        
        // Death
        if (hp &lt;= 0) {
            instance_destroy();
        } 
        
        // Knockback
        if (Player1.charging)
            move_towards_point(Player1.x, Player1.y, -25 * 1.5);    // Negative speed to indicate moving away from player.
                                                                    // Moves further away when charged.
        else
            move_towards_point(Player1.x, Player1.y, -25);
              
        alarm[0] = 5;   // alarm[0] stops the object after knockback
        
        // Flash red when hit
        image_blend = c_red;
        alarm[1] = 8;
        
        // Immunity set to true to prevent the instance from taking damage every fame. Alarm[2] resets immunity after 20 frames.
        immune = true;
        alarm[2] = 20;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> followX = Player1.x
 followY = Player1.y  
 // aggro radius
if ( abs(self.x - Player1.x ) &lt; 700 &amp;&amp; abs(self.y - Player1.y) &lt; 700 )
{ 
 if see &lt; 1
    {
    path = path_add();
    if mp_linear_path(path, Player1.x, Player1.y, 8, 0)
        see = 120;
    }
 else
    {
    angry = 1 
    }
}
else
{
    angry = 0
}


 if angry = 1
 {
    if abs(self.x - Player1.x ) &gt; abs(self.y - Player1.y)
     {
     if Player1.x &gt; self.x
     self.sprite_index = spr_SpikeBallRight;
     else
     self.sprite_index = spr_SpikeBallLeft;
     }
     else
     {
     if Player1.y &gt; self.y
     self.sprite_index = spr_SpikeBallDown;
     else
     self.sprite_index = spr_SpikeBallUp;
     }
 }
 else
    {
    direction = random(360);
    speed = default_speed
    if direction &gt;= 315 || direction &lt; 45
        self.sprite_index = spr_SpikeBallRight;
    if direction &gt;= 45 &amp;&amp; direction &lt; 135
        self.sprite_index = spr_SpikeBallUp;
    if direction &gt;= 135 &amp;&amp; direction &lt; 225
        self.sprite_index = spr_SpikeBallLeft;
    if direction &gt;= 225 &amp;&amp; direction &lt; 315
        self.sprite_index = spr_SpikeBallDown;
    }
    
 image_index = 0;
 
 
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>66,133</point>
    <point>100,100</point>
  </PhysicsShapePoints>
</object>
