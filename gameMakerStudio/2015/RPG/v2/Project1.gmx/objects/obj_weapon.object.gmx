<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>par_weapons</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Stop sword swing animation.
Player1.image_alpha = 1;
obj_weapon.image_alpha = 0;
image_xscale = 1;
image_yscale = 1;
is_busy = false;
image_speed = 0;
image_blend = c_white;

if (selected_attack == 1) {
    obj_weapon.sprite_index = spr_sword;
}
else if (selected_attack == 2) {
    obj_weapon.sprite_index = spr_sword;
}

// Reset player and parent weapon.
Player1.charging = false;
par_weapons.active = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Stop sword swing animation.
obj_weapon.sprite_index = spr_sword;
Player1.charging = false;
par_weapons.active = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (selected_attack == 1) {
    x = Player1.x;
    y = Player1.y;
}
else if (selected_attack == 2 &amp;&amp; !par_weapons.active) {
    x = Player1.x + 40;
    y = Player1.y - 40;

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Don't play any sword animations or sounds when the game is paused.
if (!obj_controller.pause)
{
    depth = Player1.depth - 1;
    key = control_array[4,1];   // Check the current control scheme and assign the button for "Attack" to the key variable.
        
    if (selected_attack == 1)
    {    

        if keyboard_check_pressed(key) {
            charge = 0;     // Reset charge level to 0 each time button is pressed.
            is_busy = true;
            
        }
        
        if keyboard_check(key) {
            charge += 1;    // Increase charge once per step. Once you increment 30 steps, or half a second, it will be charged.
            is_busy = true;
            
            if (charge &gt; 30) {
                sprite_index = spr_sword_charge;
                Player1.charging = true;
            }
        }
        
        if keyboard_check_released(key) {
            par_weapons.active = true;
            
            // Attack Sounds
            audio_play_sound(snd_swordswing1,9,0);
            
            Player1.image_alpha = 0;
            
            
            // Facing left.
            if Player1.sprite_index == spr_player_left {
                //Player1.image_alpha = 0;
                obj_weapon.image_alpha = 1;
                obj_weapon.sprite_index = spr_playerAttack_Left;
                obj_weapon.image_speed = .3;   
            }
            
            // Facing right.
            if Player1.sprite_index == spr_player_right {
                //Player1.image_alpha = 0;
                obj_weapon.image_alpha = 1;
                obj_weapon.sprite_index = spr_playerAttack_Right;
                obj_weapon.image_speed = .3;   
            }
            
            // Facing Down.
            if Player1.sprite_index == spr_player_down {
                //Player1.image_alpha = 0;
                obj_weapon.image_alpha = 1;
                obj_weapon.sprite_index = spr_playerAttack_Down;
                obj_weapon.image_speed = .3;   
            }
            
            // Facing Up.
            if Player1.sprite_index == spr_player_up {
                //Player1.image_alpha = 0;
                obj_weapon.image_alpha = 1;
                obj_weapon.sprite_index = spr_playerAttack_Up;
                obj_weapon.image_speed = .3;   
            }
        }
    }
    
    
/////////////////////////////////
    
    
    else if (selected_attack == 2 &amp;&amp; !instance_exists(obj_fireball) )
    {
        sprite_index = spr_fire;
        image_speed = 0.3;
        
        if keyboard_check_pressed(key) {
            charge = 0;     // Reset charge level to 0 each time button is pressed.
            is_busy = true;
            obj_weapon.image_alpha = 1;
        }
        
        if keyboard_check(key) {
        
            is_busy = true;
            obj_weapon.image_alpha = 1;
            
        
            charge += 1;    // Increase charge once per step. Once you increment 30 steps, or half a second, it will be charged.
            
            if (charge &lt;= 30) {
    
                image_xscale = 0.5;
                image_yscale = 0.5;
            }
            
            if (charge &gt; 30 &amp;&amp; charge &lt;= 50) {
     
                image_xscale = 1;
                image_yscale = 1;
                Player1.charging = true;
            }
            
            if (charge &gt; 50) {
                
                image_xscale = 1.5;
                image_yscale = 1.5;
                Player1.charging = true;
                sprite_index = spr_fire_equipped;
                //image_blend = c_red;
            }
        }
        
        if keyboard_check_released(key) {
            par_weapons.active = true;
            instance_create(x, y, obj_fireball);
            obj_fireball.image_xscale = image_xscale;
            obj_fireball.image_yscale = image_yscale;
            
            
            
            obj_fireball.sprite_index = sprite_index;
            obj_fireball.image_speed = 0.3;
            
            
            alarm[1] = 1;
        }
         
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
// Stop sword swing animation.
Player1.image_alpha = 1;
obj_weapon.image_alpha = 0;
image_xscale = 1;
image_yscale = 1;
is_busy = false;
image_blend = c_white;
image_speed = 0;

if (selected_attack == 1) {
    obj_weapon.sprite_index = spr_sword;
}
else if (selected_attack == 2) {
    obj_weapon.sprite_index = spr_sword;
}

// Reset player and parent weapon.
Player1.charging = false;
par_weapons.active = false;
*/

alarm[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>48,32</point>
    <point>48,0</point>
    <point>112,16</point>
  </PhysicsShapePoints>
</object>
