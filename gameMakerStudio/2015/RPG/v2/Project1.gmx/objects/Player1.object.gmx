<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>Lady</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>friction</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0.7</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Basic stats
health_max = 100;

// Stamina
stamina = 100;
stamina_max = 100;
//stamina_drain = 0.15;
stamina_drain = 0.1;
stamina_regen_resting = 0.25
stamina_regen_moving = 0.07

// Movement
player_accel_speed = 1;
player_move_speed = 5;  
player_move_speed_action = 3;
player_run_speed = 8;   
player_move_speed_charged = player_move_speed / 2;  // When charging for an attack, movement is slowed.
player_run_speed_charge = player_move_speed / 2;    // Prevents player from running while charging an attack.
movement_allow = true;      // Player is allowed to move when set true. False prevents all movement; ie. falling off a cliff.
direction_current = "";   // Locks player direction so he cannot face multiple directions.
charging = false;           // Player is charging an attack. Set to false by default. 

// Offense
atk = 19;         // Base attack.
atk_charged = 2;  // Charge attack modifier.
damage = atk;     // Total damage calculation.

// Defense
armor = 2;
immune = false;

// Money
money = 0;

// Experience
experience = 0;
level = 1;

// Animation Speeds
image_speed_walking = .2;       // Walking animation speed.
image_speed_running = .4;       // Running animation speed.

// Spawn Interact Object
instance_create(x, y, obj_interact);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Immunity prevents the player from taking damage. Immunity is set to true when they player takes damage so they don't take damage every single frame.
   Immunity is set to false after a certain number of frames, which allows the player to take damage again.     */
immune = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Change the sprite of player back to Lady after flashing red.
sprite_index = Lady;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// alarm 1 makes enemy flash red when hit

image_blend = c_white;  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// alarm[0] makes the player stop moving after being knocked back by the enemy.
speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>402</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_collision</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Prevent the player from colliding with obj_box. It will appear as if the player does collide, but it will not.
if place_meeting(x, y, obj_box){
    x = xprevious;
    y = yprevious;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;

/////////////////
// Leveling
/////////////////

if (Player1.experience &gt;= ((10*(Player1.level * Player1.level))+ Player1.level))
    scr_levelUp();
         
/////////////////
// Movement
/////////////////
if (movement_allow) {

// Left Movement
if ( keyboard_check(control_array[2,1]) &amp;&amp; !keyboard_check(control_array[3,1])) {   // Make sure right isn't pressed already!
    
    // Turn the character sprite in appropriate direction.
    Player1.sprite_index = spr_player_left;
    image_speed = image_speed_walking;  // Set animation speed. 
    
    if !place_meeting(x - 15, y, obj_box) {
        // Player acceleration on movement.
        hspeed -= player_accel_speed;
                    
        // Sprint when holding shift, otherwise walk.
        if ( keyboard_check(control_array[5,1]) ) { 
            
            // Running animation.
            image_speed = image_speed_running;
            
            if ( keyboard_check(control_array[0,1]) || keyboard_check(control_array[1,1]) || keyboard_check(control_array[3,1]) )
                stamina -= stamina_drain / 2;       // Set to half of the stamina drain because two keys are held down
                                                    // Because two keys pressed doubles stamina gain. So stamina_drain / 2
            else
                stamina -= stamina_drain;
            
                    
            if (stamina &lt;= 0) hspeed = -player_move_speed;    // Can only sprint while running. If stamina is 0, caps move speed to walk speed
            if (hspeed &lt; -6) {
                if (charging) 
                    hspeed = -player_move_speed_charged;      // Movement speed is slower when charging an attack.  
                else
                    hspeed = -player_run_speed;               // Caps movement speed at 6 when both sideways and upwards movement keys pressed
            }
        }
        else {
            if (hspeed &lt; -3) {
                if (charging)
                    hspeed = -player_move_speed_charged;
                else
                    hspeed = -player_move_speed;        
            }
        }         
    }  
    else   
        hspeed = 0;
}

// Right movement
if ( keyboard_check(control_array[3,1]) &amp;&amp; !keyboard_check(control_array[2,1]) ) {  // Make sure left isn't pressed already!
      
    // Turn the character sprite in appropriate direction.
    Player1.sprite_index = spr_player_right;
    image_speed = image_speed_walking;  // Set animation speed. 
    
    if !place_meeting(x + 15, y, obj_box) {
    
        // Player acceleration on movement
        hspeed += player_accel_speed;
                    
        // Sprint when holding shift, otherwise walk
        if ( keyboard_check(control_array[5,1]) ) { 
            
            // Running animation.
            image_speed = image_speed_running;
                    
            if ( keyboard_check(control_array[0,1]) || keyboard_check(control_array[1,1]) || keyboard_check(control_array[2,1]) )
                stamina -= stamina_drain / 2;       // Set to half of the stamina drain because two keys are held down
                                                    // Because two keys pressed doubles stamina gain. So stamina_drain / 2
            else
                stamina -= stamina_drain;
            
                    
            if (stamina &lt;= 0) hspeed = player_move_speed;    // Can only sprint while running. If stamina is 0, caps move speed to walk speed
            if (hspeed &gt; 6) {
                if (charging) 
                    hspeed = player_move_speed_charged;      // Movement speed is slower when charging an attack.  
                else
                    hspeed = player_run_speed;               // Caps movement speed at 6 when both sideways and upwards movement keys pressed
            }
        }
        else {
            if (hspeed &gt; 3) {
                if (charging)
                    hspeed = player_move_speed_charged;
                else
                    hspeed = player_move_speed;        
            }
        }         
    }  
    else   
        hspeed = 0;
}

// Upwards movement
if ( keyboard_check(control_array[0,1]) &amp;&amp; !keyboard_check(control_array[1,1]) ) {  // Make sure down isn't pressed already!
        
       // Turn the character sprite in appropriate direction.
        Player1.sprite_index = spr_player_up;
        image_speed = image_speed_walking;  // Set animation speed. 
    
    if !place_meeting(x, y - 15, obj_box) {
        // Player acceleration on movement
        vspeed -= player_accel_speed;
                    
        // Sprint when holding shift, otherwise walk
        if ( keyboard_check(control_array[5,1]) ) { 
        
            // Running animation.
            image_speed = image_speed_running;
                    
            if ( keyboard_check(control_array[2,1]) || keyboard_check(control_array[1,1]) || keyboard_check(control_array[3,1]) )
                stamina -= stamina_drain / 2;       // Set to half of the stamina drain because two keys are held down
                                                    // Because two keys pressed doubles stamina gain. So stamina_drain / 2
            else
                stamina -= stamina_drain;
            
                    
            if (stamina &lt;= 0) vspeed = -player_move_speed;    // Can only sprint while running. If stamina is 0, caps move speed to walk speed
            if (vspeed &lt; -6) {
                if (charging) 
                    vspeed = -player_move_speed_charged;      // Movement speed is slower when charging an attack.  
                else
                    vspeed = -player_run_speed;               // Caps movement speed at 6 when both sideways and upwards movement keys pressed
            }
        }
        else {
            if (vspeed &lt; -3) {
                if (charging)
                    vspeed = -player_move_speed_charged;
                else
                    vspeed = -player_move_speed;        
            }
        }         
    }  
    else   
        vspeed = 0;
}

// Downwards movement
if ( keyboard_check(control_array[1,1]) &amp;&amp; !keyboard_check(control_array[0,1]) ) {

       // Turn the character sprite in appropriate direction.
        Player1.sprite_index = spr_player_down;
        image_speed = image_speed_walking;  // Set animation speed. 
    
    if !place_meeting(x, y + 15, obj_box) {
        // Player acceleration on movement
        vspeed += player_accel_speed;
                    
        // Sprint when holding shift, otherwise walk
        if ( keyboard_check(control_array[5,1]) ) { 
        
            // Running animation.
            image_speed = image_speed_running;
                    
            if ( keyboard_check(control_array[2,1]) || keyboard_check(control_array[0,1]) || keyboard_check(control_array[3,1]) )
                stamina -= stamina_drain / 2;       // Set to half of the stamina drain because two keys are held down
                                                    // Because two keys pressed doubles stamina gain. So stamina_drain / 2
            else
                stamina -= stamina_drain;
            
                    
            if (stamina &lt;= 0) vspeed = player_move_speed;    // Can only sprint while running. If stamina is 0, caps move speed to walk speed
            if (vspeed &gt; 6) {
                if (charging) 
                    vspeed = player_move_speed_charged;      // Movement speed is slower when charging an attack.  
                else
                    vspeed = player_run_speed;               // Caps movement speed at 6 when both sideways and upwards movement keys pressed
            }
        }
        else {
            if (vspeed &gt; 3) {
                if (charging)
                    vspeed = player_move_speed_charged;
                else
                    vspeed = player_move_speed;        
            }
        }         
    }  
    else   
        vspeed = 0;
}
}

// Stamina regen when resting
if (hspeed == 0 &amp;&amp; vspeed == 0)
{
    stamina += stamina_regen_resting;
    image_speed = 0  // stop walking animation
    image_index = 3 // set animation to specific frame
}

// Stamina regen when moving
if (!(hspeed == 0 &amp;&amp; vspeed == 0))
{
    stamina += stamina_regen_moving;
}

// Prevents stamina from going past player's maximum and minimum values.
if (stamina &gt;= stamina_max) stamina = stamina_max;
if (stamina &lt;= 0) stamina = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>402</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_collision</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
////////////////////////////////
// Enemies parent object
////////////////////////////////
if place_meeting(x, y, par_enemy)
{

    if !(immune) {
        // Health
        health -= other.damage - armor;
        if (health &lt; 0)
            health = 0;
           
        // Stamina
        stamina -= 3;
        if (stamina &lt; 0) stamina = 0;
                    
        // Knockback
        move_towards_point(other.x,other.y, -25)
        alarm[0] = 4;                                   // alarm[0] stops the object after knockback
        
        // Flash red when hit
        image_blend = c_red;
        alarm[1] = 5;
        
        // Immunity is enabled to prevent the player from being hit every frame. Alarm resets immunity after 20 frames.
        immune = true;
        alarm[3] = 20;
    } 
}

////////////////////////////////
// Spike Trap Collision
////////////////////////////////
if place_meeting(x, y, obj_SpikeBasic)
{
    if !(immune) {
    
        if (instance_nearest(x, y, obj_SpikeBasic).sprite_index == spr_SpikeUp ||
            instance_nearest(x, y, obj_SpikeBasic).sprite_index == spr_SpikeDown) {
            
            // Health
            health -= health_max * (1/3);
               
            // Stamina
            stamina -= 3;
            if (stamina &lt; 0) stamina = 0;
                        
            // Knockback
            move_towards_point(other.x,other.y, -25)
            alarm[0] = 4;                                   // alarm[0] stops the object after knockback
            
            // Flash red when hit
            image_blend = c_red;
            alarm[1] = 5;
            
            // Immunity is enabled to prevent the player from being hit every frame. Alarm resets immunity after 20 frames.
            immune = true;
            alarm[3] = 20;
       }
    }
}

////////////////////////////////
// Arrow Trap Collision
////////////////////////////////
if place_meeting(x, y, obj_Arrow)
{
    if !(immune) {
    
            
            // Health
            health -= health_max * (1/3);
               
            // Stamina
            stamina -= 3;
            if (stamina &lt; 0) stamina = 0;
                        
            // Knockback
            move_towards_point(other.x,other.y, -25)
            alarm[0] = 4;                                   // alarm[0] stops the object after knockback
            
            // Flash red when hit
            image_blend = c_red;
            alarm[1] = 5;
            
            // Immunity is enabled to prevent the player from being hit every frame. Alarm resets immunity after 20 frames.
            immune = true;
            alarm[3] = 20;
    }
}

////////////////////////////////
// Boss room Teleporter Entrance
////////////////////////////////
if place_meeting(x, y, obj_boss_room_next)
{
  
    // Temple Boss Entrance
    if (room == rm_caveT1) {
        
        // Switch room
        room_goto(rm_caveTBoss); 
    }
    
    // Teleport player to correct position in room.
    obj_controller.alarm[4] = 1;
    
    // Allow player movement after switching levels.
    Player1.movement_allow = true;
}

////////////////////////////////
// Boss room Teleporter Exit
////////////////////////////////
if place_meeting(x, y, obj_boss_room_previous)
{    

    // Temple Boss Exit
    if (room == rm_caveTBoss) {
        
        // Switch room
        room_goto(rm_caveT1);   
    }
    
    // Teleport player to correct position in room.
    obj_controller.alarm[5] = 1;
    
    // Allow player movement after switching levels.
    Player1.movement_allow = true;
}

////////////////////////////////
// Next room transferring
////////////////////////////////
if place_meeting(x, y, obj_next_room)
{

    // check current room and set the teleport location to appropriate level's spawn_x and spawn_y located in obj_controller
    
    // Teleport to next room
    if room_exists(room_next(room)) { 
        //
        room_set_persistent(room_next(room), true);
        room_persistent = false;
        //
        room_goto_next(); 
    }
    
    // Cave Music Enter
    if (room_next(room) == rm_cave1)
    {

        // Change Music
        if (music_allow == true &amp;&amp; music_current != music_cave) {     // Check if it's alright to play music.
        
            if ( audio_is_playing(music_current) )          // If music is currently playing, stop it. 
                audio_stop_sound(music_current);
                        
           
            audio_play_sound(music_cave, 10, true);         // Start new music track.
            audio_sound_gain(music_cave, music_volume, 0);  // Sound Volume
            music_current = music_cave;
        }
    }
     
    // Maze Music Enter
    if (room == rm_caveT1)
    {
        // Switch room
        room_goto(rm_Maze1L);

        // Change Music
        if (music_allow == true &amp;&amp; music_current != music_jungle) {     // Check if it's alright to play music.
        
            if ( audio_is_playing(music_current) )          // If music is currently playing, stop it. 
                audio_stop_sound(music_current);
                        
           
            audio_play_sound(music_jungle, 10, true);         // Start new music track.
            audio_sound_gain(music_jungle, music_volume, 0);  // Sound Volume
            music_current = music_jungle;
        }
    }
    
    // Forest Music Enter
    if (room == rm_Maze6)
    {
        
        // Switch room
        room_goto(rm_Forest1);
        
        // Change Music
        if (music_allow == true &amp;&amp; music_current != music_forest) {     // Check if it's alright to play music.
    
            if ( audio_is_playing(music_current) )          // If music is currently playing, stop it. 
                audio_stop_sound(music_current);
                        
           
            audio_play_sound(music_forest, 10, true);         // Start new music track.
            audio_sound_gain(music_forest, music_volume, 0);  // Sound Volume
            music_current = music_forest;
        }
    }
    
    
    // Move player to location controller location.    
    obj_controller.alarm[0] = 1;
        
    // Allow player movement after switching levels.
    Player1.movement_allow = true;
}

////////////////////////////////
// Previous room transferring
////////////////////////////////
if place_meeting(x, y, obj_previous_room)
{

    if room_exists(room_previous(room)) { 
        //
        room_persistent = false;
        room_set_persistent(room_previous(room), true);
        room_goto_previous(); 
        //
        
    }
    
    // Cave Music Return
    if (room == rm_Maze1L)
    {
        
        // Switch room
        room_goto(rm_caveT1);
        
        // Change Music
        if (music_allow == true &amp;&amp; music_current != music_cave) {     // Check if it's alright to play music.
        
            if ( audio_is_playing(music_current) )          // If music is currently playing, stop it. 
                audio_stop_sound(music_current);
                        
           
            audio_play_sound(music_cave, 10, true)          // Start new music track.
            audio_sound_gain(music_cave, music_volume, 0);  // Change Volume       
            music_current = music_cave;
        }
    }
    
    // Maze Music Return
    if (room == rm_Forest1)
    {
        
        // Switch room
        room_goto(rm_Maze6);    
    
        /// Change Music
        if (music_allow == true &amp;&amp; music_current != music_jungle) {     // Check if it's alright to play music.
        
            if ( audio_is_playing(music_current) )          // If music is currently playing, stop it. 
                audio_stop_sound(music_current);
                        
           
            audio_play_sound(music_jungle, 10, true);         // Start new music track.
            audio_sound_gain(music_jungle, music_volume, 0);  // Sound Volume
            music_current = music_jungle;
        }
    }
    
    // Forest Music Return  -- Not coded when rooms after Forest5 were created.
    if (room_previous(room) == rm_Forest5)
    {
    
        // Switch room
        room_goto(rm_Forest5);
    
        // Change Music
        if (music_allow == true &amp;&amp; music_current != music_forest) {     // Check if it's alright to play music.
    
            if ( audio_is_playing(music_current) )          // If music is currently playing, stop it. 
                audio_stop_sound(music_current);
                        
           
            audio_play_sound(music_forest, 10, true);         // Start new music track.
            audio_sound_gain(music_forest, music_volume, 0);  // Sound Volume
            music_current = music_forest;
        }     
    }
    
    // Move player to location controller location.
    obj_controller.alarm[1] = 1;
    
    // Allow player movement after switching levels.
    Player1.movement_allow = true;
}

/////////////////////////////////////////
// Secret room transferring - Entering Secret Area
//////////////////////////////////////////
if place_meeting(x, y, obj_secret_room_next)
{
    ////////////////
    // CAVE SECRETS
    ///////////////
    
    // rm_cave2 --&gt; rm_cave3
    if (room == rm_cave2)
    {
    
        // Switch room
        room_goto(rm_cave3);
    }
    
    // rm_cave3 --&gt; rm_cave6
    if (room == rm_cave3)
    {
    
        // Switch room
        room_goto(rm_cave6);
    }
    
    // rm_cave5 --&gt; rm_cave5Side
    if (room == rm_cave5)
    {
    
        // Switch room
        room_goto(rm_cave5Side);
    }
    
    // rm_caveT1 --&gt; rm_caveT1LS
    if (room == rm_caveT1)
    {
    
        // Switch room
        room_goto(rm_caveT1LS);
    }

       
    ////////////////
    // MAZE SECRETS
    ///////////////
    
    // rm_Maze4 --&gt; rm_Jungle
    if (room == rm_Maze4)
    {
    
        // Switch room
        room_goto(rm_Jungle);
    }
    
    // rm_Maze6 --&gt; rm_Maze6S
    if (room == rm_Maze6)
    {
    
        // Switch room
        room_goto(rm_Maze6S);
    }

    

    // Move player to location controller location.
    obj_controller.alarm[2] = 1;
    
    // Allow player movement after switching levels.
    Player1.movement_allow = true;
}

/////////////////////////////////////////
// Secret room transferring - Leaving Secret Area
//////////////////////////////////////////
if place_meeting(x, y, obj_secret_room_previous)
{

    ////////////////
    // CAVE SECRETS
    ///////////////
    
    // rm_cave3 --&gt; rm_cave2
    if (room == rm_cave3)
    {
    
        // Switch room
        room_goto(rm_cave2);
    }
    
    // rm_cave6 --&gt; rm_cave3
    if (room == rm_cave6)
    {
    
        // Switch room
        room_goto(rm_cave3);
    }
    
    // rm_cave5Side --&gt; rm_cave5
    if (room == rm_cave5Side)
    {
    
        // Switch room
        room_goto(rm_cave5);
    }
    
    // rm_caveT1LS --&gt; rm_caveT1
    if (room == rm_caveT1LS)
    {
    
        // Switch room
        room_goto(rm_caveT1);
    }
    
    
    ////////////////
    // MAZE SECRETS
    ///////////////

    // rm_Jungle --&gt; rm_Maze4
    if (room == rm_Jungle)
    {
        
        // Switch room
        room_goto(rm_Maze4);
    }
    
    // rm_Maze6S --&gt; rm_Maze6
    if (room == rm_Maze6S)
    {
    
        // Switch room
        room_goto(rm_Maze6);
    }
    

    
    // Move player to location controller location.
    obj_controller.alarm[3] = 1;
    
    // Allow player movement after switching levels.
    Player1.movement_allow = true;
}

/////////////////////////////////////////
// Enter Jungle Maze Area
//////////////////////////////////////////
if place_meeting(x, y, obj_maze)
{
    // Teleport to next room
    
    // Enter Jungle
    if (room == rm_caveT1) {
        
        // Switch room
        room_goto(rm_Maze1L);
        
        // Change Music
        if (music_allow == true &amp;&amp; music_current != music_jungle) {     // Check if it's alright to play music.
        
            if ( audio_is_playing(music_current) )              // If music is currently playing, stop it. 
                audio_stop_sound(music_current);
                        
           
            audio_play_sound(music_jungle, 10, true);           // Start new music track.
            audio_sound_gain(music_jungle, music_volume, 0);    // Change Volume    
            music_current = music_jungle;
        }
        
        // Teleport player to correct position in room.
        Player1.x = obj_controller.maze_enter_x;  
        Player1.y = obj_controller.maze_enter_y;
    }
    
    // Allow player movement after switching levels.
    Player1.movement_allow = true;
}

/////////////////////////////////////////
// Maze room transferring - Leaving Secret Area
//////////////////////////////////////////
if place_meeting(x, y, obj_maze)
{
    // Teleport to previous room
    
    // Leave Jungle
    if (room == rm_Maze1L) {
        
        // Switch room
        room_goto(rm_caveT1);
        
        // Change Music
        if (music_allow == true &amp;&amp; music_current != music_cave) {     // Check if it's alright to play music.
        
            if ( audio_is_playing(music_current) )          // If music is currently playing, stop it. 
                audio_stop_sound(music_current);
                        
           
            audio_play_sound(music_cave, 10, true);         // Start new music track.
            audio_sound_gain(music_cave, music_volume, 0);  // Change Volume    
            music_current = music_cave;
        }
        
        // Teleport player to correct position in room.
        Player1.x = obj_controller.maze_exit_x;  
        Player1.y = obj_controller.maze_exit_y;
    }
    
    // Allow player movement after switching levels.
    Player1.movement_allow = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>48,0</point>
    <point>48,80</point>
    <point>0,80</point>
    <point>0,16</point>
    <point>16,0</point>
    <point>32,0</point>
  </PhysicsShapePoints>
</object>
