<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cliff</spriteName>
  <solid>-1</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_parentCliff</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Check player's current scale value. If it's 0, it means he has completely shrunk and is ready to be moved onto the stage.
   After the player is on the stage, expand him again.      */
if (Player1.image_xscale == 0) {
    
    // Find a valid location for the player to be placed after falling.
    rand_x = 200;  
    rand_y = 0;
    if !place_free(rand_x, rand_y) {
        do {
            rand_x = random_range(250, 100);
            rand_y = random_range(-150, 150);   
        } until place_free(rand_x, rand_y);   
    }

    // Move player back onto stage.
    Player1.x += rand_x;   
    Player1.y += rand_y;
    
    // Expand Player.
    scr_expand();
    
    // Allow player to move again.
    Player1.movement_allow = true;
    
}
else {
    // Shrink the player.
    Player1.image_xscale -= 0.02;
    Player1.image_yscale -= 0.02;
    Player1.image_alpha -= 0.02;
    
    // Shrink the player's weapon.
    obj_weapon.image_xscale -= 0.02;
    obj_weapon.image_yscale -= 0.02;
    obj_weapon.image_alpha -= 0.02;
    
    // Re-call the alarm to "loop" the shrinking process.
    alarm[0] = 1.5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>402</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_collision</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
////////////////////////////////
// Right Cliff Object
////////////////////////////////

randomize();

if place_meeting(x, y, Player1)
{
    // Try moving player directly to the right, if place_free is false randomize the placement in the general area.
  
    // Check if movement is allowed
    if (Player1.movement_allow == true) {
    
        // Prevent player from moving while falling off cliff.
        Player1.movement_allow = false;
        Player1.hspeed = 0;
        Player1.vspeed = 0;
        
        // Play falls off cliff animation - set movement to false to force player to wait for animation before continuing.
        alarm[0] = 1.5;
        
        // Health
        Player1.health -= 30;
        
        // Flash transparent when hit.
        Player1.sprite_index = lady_animate_cliff;
        Player1.alarm[2] = 90;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>75,75</point>
  </PhysicsShapePoints>
</object>
